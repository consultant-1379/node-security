/*------------------------------------------------------------------------------
 *******************************************************************************
 * COPYRIGHT Ericsson 2012
 *
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 *******************************************************************************
 *----------------------------------------------------------------------------*/
package com.ericsson.oss.services.nscs.nodes.dao;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.slf4j.Logger;

import com.ericsson.nms.security.nscs.api.exception.DataAccessException;
import com.ericsson.nms.security.nscs.api.exception.NscsErrorCodes;
import com.ericsson.nms.security.nscs.api.model.NodeRef;
import com.ericsson.nms.security.nscs.api.model.NodeReference;
import com.ericsson.nms.security.nscs.data.NscsCMReaderService;
import com.ericsson.nms.security.nscs.data.nodereference.NormalizableNodeReference;
import com.ericsson.oss.services.cm.cmshared.dto.CmObject;
import com.ericsson.oss.services.cm.cmshared.dto.CmResponse;

public class CollectionsDAO {

    public static final String ATTRIBUTE_USERID = "userId";
    public static final String ATTRIBUTE_CATEGORY = "category";
    public static final String AUTOGENERATED_COLLECTIONS_USER_ID = "networkExplorer";
    public static final String PUBLIC_CATEGORY = "Public";
    public static final String ATTRIBUTE_MO_LIST_COLLECTION = "moList";
    public static final String ATTRIBUTE_QUERY_SAVED_SEARCH = "searchQuery";
    public static final String ATTRIBUTE_FDN = "fdn";
    public static final String ATTRIBUTE_NAME = "name";

    @Inject
    NscsCMReaderService service;

    @Inject
    private Logger logger;

    public List<Map<String, Object>> getCollectionsByPoIds(final List<Long> persistenceObjectIds, String userId) {

        logger.debug("Getting info from getCollectionsByPoIds() method");

        final CmResponse cmResponse = service.getPosByPoIds(persistenceObjectIds);

        final List<Map<String, Object>> moWithAtrributesList = new ArrayList<>();
        try {
            if (Math.signum(cmResponse.getStatusCode()) == -1) {
                logger.error("Cm-Reader data access fail with status : {}", cmResponse.getStatusMessage());
                throw new DataAccessException(NscsErrorCodes.UNEXPECTED_INTERNAL_ERROR);
            }

            final Collection<CmObject> collectionPO = cmResponse.getCmObjects();
            List<Long> moIDList = new ArrayList<Long>();
            if (collectionPO != null) {

                final Iterator<CmObject> iterate = collectionPO.iterator();
                while (iterate.hasNext()) {
                    final CmObject cmObject = iterate.next();

                    //User can only access a collection, either if it is generated by him or if it autogenerated, as anyone can see the autogenerated collections
                    final String collectionPOUserId = cmObject.getAttributes().get(ATTRIBUTE_USERID).toString();
                    final String category = String.valueOf(cmObject.getAttributes().get(ATTRIBUTE_CATEGORY));
                    if ((collectionPOUserId.equals(userId)) || (collectionPOUserId.equalsIgnoreCase(AUTOGENERATED_COLLECTIONS_USER_ID)) || category.equals(PUBLIC_CATEGORY)) {
                        moIDList.addAll((List<Long>) cmObject.getAttributes().get(ATTRIBUTE_MO_LIST_COLLECTION));
                    } else {
                        logger.error("User \"{}\" attempted to load a collection owned by \"{}\"", userId, collectionPOUserId);
                        throw new DataAccessException(NscsErrorCodes.UNEXPECTED_INTERNAL_ERROR);
                    }
                }
            }

            // Now use the list of poIds from the static collection and retrieve
            // fdn and specified attributes from URL
            if (!moIDList.isEmpty()) {
                final CmResponse response = service.getNodesByPoIds(moIDList);
                if (response != null && Math.signum(response.getStatusCode()) != -1) {
                    final Collection<CmObject> managedElementMOs = response.getCmObjects();
                    for (final CmObject managedObjectMO : managedElementMOs) {
                        if (managedObjectMO != null) {
                            final Map<String, Object> moAttributes = new HashMap<>();
                            //calculate name form fdn
                            NodeReference nodeRef = new NodeRef(managedObjectMO.getFdn());
                            NormalizableNodeReference normNode = service.getNormalizedNodeReference(nodeRef);
                            if (normNode != null) {
                                //moAttributes.put(ATTRIBUTE_FDN, managedObjectMO.getFdn());
                                moAttributes.put(ATTRIBUTE_NAME, normNode.getName());
                                moWithAtrributesList.add(moAttributes);
                            } else {
                                logger.error("Cannot get NormalizedNodeReference for node fdn [{}]", managedObjectMO.getFdn());
                            }
                        }
                    }
                    logger.debug("Completed loop over moWithAtrributesList");
                } else {
                    logger.error("Null or Empty response for MoIdList");
                    throw new DataAccessException(NscsErrorCodes.UNEXPECTED_INTERNAL_ERROR);
                }
            } else {
                logger.debug("There is no MOs available for this static collection");
            }
        } catch (final IllegalStateException e) {
            logger.error("Empty response for MoIdList");
            throw new DataAccessException(NscsErrorCodes.UNEXPECTED_INTERNAL_ERROR + ": " + e.getMessage());
        }
        logger.debug("Returning moWithAtrributesList from getCollectionsByPoIds() [{}]", moWithAtrributesList.toString());

        return moWithAtrributesList;
    }

}
